name: Full CI/CD - Lint, Build, Push, and Deploy (Nginx + Django + MySQL)

# --------------- triggers ---------------------------------------------
on:
  push:
    branches:
      - master      
# --------------- /triggers ---------------------------------------------

# 중복 실행 방지
concurrency:
  group: wishfast-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          ref: ${{ github.event_name == 'push' && github.head_ref || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/wishfast:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/wishfast:sha-${{ github.sha }}

  deploy:
    needs: build-and-push
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 with Docker Compose (nginx + web)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -Eeuo pipefail

            APP_DIR="/home/ubuntu/wishfast"
            mkdir -p "$APP_DIR/nginx/conf.d"
            cd "$APP_DIR"

            rm -f .env
            cat > .env << EOF
DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}'
DJANGO_DEBUG='${{ secrets.DJANGO_DEBUG }}'
DJANGO_ALLOWED_HOSTS='${{ secrets.DJANGO_ALLOWED_HOSTS }}'
DB_HOST='${{ secrets.RDS_HOST }}'
MYSQL_DATABASE='${{ secrets.RDS_DB_NAME }}'
MYSQL_USER='${{ secrets.RDS_USER }}'
MYSQL_PASSWORD='${{ secrets.RDS_PASSWORD }}'
DOCKERHUB_IMAGE='${{ secrets.DOCKERHUB_USERNAME }}/wishfast'
IMAGE_TAG='sha-${{ github.sha }}'
GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}'
GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}'
SITE_DOMAIN='${{ secrets.SITE_DOMAIN }}'
SEOUL_SUBWAY_API_KEY='${{ secrets.SEOUL_SUBWAY_API_KEY }}'
EOF

            set -a
            . ./.env
            set +a

            if ! command -v docker >/dev/null 2>&1; then
              echo "[deploy:docker-ensure] Docker CE 설치되어 있지 않습니다. 설치하겠습니다..."
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
                sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
                https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi

            sudo systemctl enable --now docker
            sudo docker version || (echo "[deploy:docker-ensure] Docker 데몬이 실행 중이 아닙니다" && exit 1)

            if ! sudo docker compose version >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y docker-compose-plugin
            fi

            if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
              echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            fi

            sudo docker network create appnet || true

            cat > nginx/conf.d/default.conf << EOF
server {
  listen 80;
  server_name subway-info-easy.site;
  return 301 https://\$host\$request_uri;
}

server {
  listen 443 ssl http2;
  server_name subway-info-easy.site;

  ssl_certificate /etc/letsencrypt/live/subway-info-easy.site/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/subway-info-easy.site/privkey.pem;
  ssl_session_timeout 1d;
  ssl_session_cache shared:MozSSL:10m;
  ssl_session_tickets off;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always; 

  location /static/ {
    alias /wishfast/staticfiles/;
    try_files \$uri \$uri/ =404;
  }

  location / {
    proxy_pass http://web:8000;
    proxy_http_version 1.1;
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto \$scheme;
  }
}
EOF

            cat > docker-compose.prod.yml << 'EOF'
services:
  web:
    image: "${DOCKERHUB_IMAGE}:${IMAGE_TAG}"
    container_name: wishfast_web
    restart: always
    env_file: .env
    environment:
      SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DB_HOST: ${DB_HOST}
      DB_PORT: "3306"
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      DJANGO_SETTINGS_MODULE: config.settings.prod
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      SITE_DOMAIN: ${SITE_DOMAIN}
    volumes:
      - ./staticfiles:/wishfast/staticfiles
      - ./logs:/wishfast/logs
    networks: [appnet]
    expose:
      - "8000"
    command: >
      sh -lc "
      gunicorn config.wsgi:application
      --bind 0.0.0.0:8000
      --access-logfile /wishfast/logs/gunicorn_access.log
      --error-logfile /wishfast/logs/gunicorn_error.log
      --log-level debug
      "

  nginx:
    image: nginx:1.27-alpine
    container_name: nginx_edge
    restart: always
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./staticfiles:/wishfast/staticfiles:ro
    networks: [appnet]

networks:
  appnet:
    external: true
EOF

            sudo docker compose -f docker-compose.prod.yml pull web
            sudo docker compose -f docker-compose.prod.yml ps

            sudo docker compose -f docker-compose.prod.yml run --rm web sh -lc "
              echo '[deploy:migrate-and-static] DB 마이그레이션 시작...';
              sleep 5;
              python manage.py migrate --noinput --settings=config.settings.prod || \
              python manage.py migrate --fake-initial --noinput --settings=config.settings.prod;
              python manage.py collectstatic --noinput --settings=config.settings.prod;
              echo '[deploy:migrate-and-static] 완료.';
            "

            sudo docker compose -f docker-compose.prod.yml up -d web nginx
            sudo docker compose -f docker-compose.prod.yml ps
            echo "[deploy:done] 배포 완료"

  cleanup:
    needs: deploy          
    if: ${{ github.event_name == 'push' }}  
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old Docker images on EC2 (retain last 3)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -Eeuo pipefail
            echo "[cleanup] 오래된 Docker 이미지를 정리합니다."
            REPO="${{ secrets.DOCKERHUB_USERNAME }}/wishfast"
            KEEP_N=3
            mapfile -t IN_USE <<< "$(sudo docker ps -a --format '{{.Image}}' | sort -u)"
            mapfile -t KEEP_SHA <<< "$(
              sudo docker images --format '{{.Repository}}:{{.Tag}} {{.CreatedAt}}' |
              awk -v r="$REPO" '$1 ~ r":sha-" {print $1, $2" "$3" "$4" "$5" "$6}' |
              sort -rk2 | head -n "$KEEP_N" | awk '{print $1}'
            )"
            mapfile -t ALL_SHA <<< "$(sudo docker images --format '{{.Repository}}:{{.Tag}}' | awk -v r="$REPO" '$1 ~ r":sha-" {print $1}')"
            PROTECT_LIST=("${KEEP_SHA[@]}")
            if sudo docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^${REPO}:latest$"; then
              PROTECT_LIST+=("${REPO}:latest")
            fi
            DELETE_LIST=()
            for img in "${ALL_SHA[@]}"; do
              if printf '%s\n' "${PROTECT_LIST[@]}" | grep -qx "$img"; then continue; fi
              if printf '%s\n' "${IN_USE[@]}" | grep -qx "$img"; then continue; fi
              DELETE_LIST+=("$img")
            done
            if [ "${#DELETE_LIST[@]}" -gt 0 ]; then
              echo "[cleanup] 오래된 이미지 ${#DELETE_LIST[@]}개 삭제:"
              printf '  - %s\n' "${DELETE_LIST[@]}"
              for img in "${DELETE_LIST[@]}"; do sudo docker rmi -f "$img" || true; done
            fi
            sudo docker image prune -f || true
            sudo docker builder prune -f || true
            echo "[cleanup] 완료되었습니다."
